import { __rest } from "tslib";
import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';
import { addBorderedNodes, addSelectedNodes, clearBordered, clearSelected, removeBorderedNodes, resetRefLineState, updateNodes, updateRefLinesState, } from '../../actions';
import * as i0 from "@angular/core";
import * as i1 from "../../services";
import * as i2 from "../../services/utils.service";
import * as i3 from "@angular/common";
import * as i4 from "../box-item/box-item.component";
import * as i5 from "../../directives/draggable.directive";
function CanvasComponent_ce_box_item_0_Template(rf, ctx) { if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "ce-box-item", 1);
    i0.ɵɵlistener("ceOnStart", function CanvasComponent_ce_box_item_0_Template_ce_box_item_ceOnStart_0_listener($event) { i0.ɵɵrestoreView(_r3); const node_r1 = ctx.$implicit; const ctx_r2 = i0.ɵɵnextContext(); return ctx_r2.moveStart($event, node_r1); })("ceOnMove", function CanvasComponent_ce_box_item_0_Template_ce_box_item_ceOnMove_0_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.moving($event); })("ceOnStop", function CanvasComponent_ce_box_item_0_Template_ce_box_item_ceOnStop_0_listener() { i0.ɵɵrestoreView(_r3); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.moveEnd(); })("pointerenter", function CanvasComponent_ce_box_item_0_Template_ce_box_item_pointerenter_0_listener() { i0.ɵɵrestoreView(_r3); const node_r1 = ctx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.showBorder(node_r1.id); })("pointerleave", function CanvasComponent_ce_box_item_0_Template_ce_box_item_pointerleave_0_listener() { i0.ɵɵrestoreView(_r3); const node_r1 = ctx.$implicit; const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.removeBorder(node_r1.id); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const node_r1 = ctx.$implicit;
    i0.ɵɵproperty("ceDragDisabled", node_r1 == null ? null : node_r1.locked)("node", node_r1);
} }
const REF_LINE_DIRECTION_COMPARE_MAP = {
    tx: [
        {
            baseKey: 'top',
            referKey: 'top',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.top }),
        },
        {
            baseKey: 'top',
            referKey: 'cy',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.cy }),
        },
        {
            baseKey: 'top',
            referKey: 'bottom',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.bottom }),
        },
    ],
    bx: [
        {
            baseKey: 'bottom',
            referKey: 'top',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.top - baseRect.height }),
        },
        {
            baseKey: 'bottom',
            referKey: 'cy',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.cy - baseRect.height }),
        },
        {
            baseKey: 'bottom',
            referKey: 'bottom',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.bottom - baseRect.height }),
        },
    ],
    ly: [
        {
            baseKey: 'left',
            referKey: 'left',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.left }),
        },
        {
            baseKey: 'left',
            referKey: 'cx',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.cx }),
        },
        {
            baseKey: 'left',
            referKey: 'right',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.right }),
        },
    ],
    ry: [
        {
            baseKey: 'right',
            referKey: 'left',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.left - baseRect.width }),
        },
        {
            baseKey: 'right',
            referKey: 'cx',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.cx - baseRect.width }),
        },
        {
            baseKey: 'right',
            referKey: 'right',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.right - baseRect.width }),
        },
    ],
    cx: [
        {
            baseKey: 'cy',
            referKey: 'top',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.top - baseRect.height / 2 }),
        },
        {
            baseKey: 'cy',
            referKey: 'cy',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.cy - baseRect.height / 2 }),
        },
        {
            baseKey: 'cy',
            referKey: 'bottom',
            baseValue: (baseRect, referRect) => ({ key: 'top', value: referRect.bottom - baseRect.height / 2 }),
        },
    ],
    cy: [
        {
            baseKey: 'cx',
            referKey: 'left',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.left - baseRect.width / 2 }),
        },
        {
            baseKey: 'cx',
            referKey: 'cx',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.cx - baseRect.width / 2 }),
        },
        {
            baseKey: 'cx',
            referKey: 'right',
            baseValue: (baseRect, referRect) => ({ key: 'left', value: referRect.right - baseRect.width / 2 }),
        },
    ],
};
export class CanvasComponent {
    constructor(store, utils) {
        this.store = store;
        this.utils = utils;
        this.pointerSnapshot = null;
        this.nodesSnapshot = new Map();
        this.gap = 5;
        this.nodes$ = this.store.selectDifferent((state) => state.nodes);
        this.store.select((state) => state.nodes).subscribe((nodes) => (this.nodes = nodes));
        this.store.select((state) => state.selected).subscribe((state) => (this.selected = state));
        this.store.select((state) => state.canvasPosition).subscribe((state) => (this.canvasPosition = state));
    }
    nodeListTrackByFn(i, node) {
        return node.id;
    }
    moveStart(ev, node) {
        ev.preventDefault();
        ev.stopPropagation();
        this.nodesSnapshot.clear();
        this.pointerSnapshot = [ev.clientX, ev.clientY];
        let selected = [...this.selected];
        if (!this.selected.has(node.id)) {
            this.store.dispatch(clearBordered());
            this.store.dispatch(clearSelected());
            this.store.dispatch(addSelectedNodes([node.id]));
            selected = [node.id];
        }
        this.outerBoxSnapshot = this.utils.getOuterBoundingBox(selected
            .map((id) => this.utils.getNodeById(id, this.nodes))
            .map((item) => this.utils.getAbsolutePosition(item.left + item.width / 2, item.top + item.height / 2, item.width, item.height, item.rotate)));
        this.unselectedNodes = this.nodes.filter((item) => !selected.includes(item.id));
        selected.forEach((id) => {
            const item = this.nodes.find((n) => n.id === id);
            this.nodesSnapshot.set(item.id, Object.assign(Object.assign({}, item), { cxPercent: (item.left + item.width / 2 - this.outerBoxSnapshot.left) / this.outerBoxSnapshot.width, cyPercent: (item.top + item.height / 2 - this.outerBoxSnapshot.top) / this.outerBoxSnapshot.height }));
        });
    }
    moving(ev) {
        if (this.pointerSnapshot) {
            this.store.dispatch(resetRefLineState());
            const { scale } = this.canvasPosition;
            const [x, y] = this.pointerSnapshot;
            const [mx, my] = [(ev.clientX - x) / scale, (ev.clientY - y) / scale];
            const baseRect = Object.assign(Object.assign({}, this.outerBoxSnapshot), { left: this.outerBoxSnapshot.left + mx, top: this.outerBoxSnapshot.top + my, right: this.outerBoxSnapshot.right + mx, bottom: this.outerBoxSnapshot.bottom + my, cx: this.outerBoxSnapshot.cx + mx, cy: this.outerBoxSnapshot.cy + my });
            const refLinesState = {
                bx: null,
                tx: null,
                ly: null,
                ry: null,
                cx: null,
                cy: null,
            };
            this.unselectedNodes.forEach((node) => {
                const nodeRect = this.utils.getBoundingBox(node.width, node.height, node.left, node.top, node.rotate);
                ['tx', 'bx', 'ly', 'ry', 'cx', 'cy'].forEach((direction) => {
                    const result = getRefLineStateByDirection(direction, baseRect, nodeRect, this.gap / scale);
                    if (result) {
                        const { state, position, base } = result;
                        if (state) {
                            refLinesState[direction] = { state, position };
                            baseRect[base.key] = base.value;
                        }
                    }
                });
            });
            const newNodes = [];
            this.nodesSnapshot.forEach((node) => {
                const { cxPercent, cyPercent, width, height, nodeRect } = node, properties = __rest(node, ["cxPercent", "cyPercent", "width", "height", "nodeRect"]);
                newNodes.push(Object.assign(Object.assign({}, properties), { width,
                    height, left: cxPercent * baseRect.width + baseRect.left - width / 2, top: cyPercent * baseRect.height + baseRect.top - height / 2 }));
            });
            this.store.dispatch(updateRefLinesState(refLinesState));
            this.store.dispatch(updateNodes(newNodes));
        }
    }
    moveEnd() {
        this.pointerSnapshot = null;
        this.store.dispatch(resetRefLineState());
        this.nodesSnapshot.clear();
    }
    showBorder(id) {
        this.store.dispatch(addBorderedNodes([id]));
    }
    removeBorder(id) {
        if (!this.selected.has(id)) {
            this.store.dispatch(removeBorderedNodes([id]));
        }
    }
}
CanvasComponent.ɵfac = function CanvasComponent_Factory(t) { return new (t || CanvasComponent)(i0.ɵɵdirectiveInject(i1.EditorStore), i0.ɵɵdirectiveInject(i2.CeUtilsService)); };
CanvasComponent.ɵcmp = i0.ɵɵdefineComponent({ type: CanvasComponent, selectors: [["ce-canvas"]], decls: 2, vars: 4, consts: [["ceDraggable", "", 3, "ceDragDisabled", "node", "ceOnStart", "ceOnMove", "ceOnStop", "pointerenter", "pointerleave", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["ceDraggable", "", 3, "ceDragDisabled", "node", "ceOnStart", "ceOnMove", "ceOnStop", "pointerenter", "pointerleave"]], template: function CanvasComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, CanvasComponent_ce_box_item_0_Template, 1, 2, "ce-box-item", 0);
        i0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(1, 2, ctx.nodes$))("ngForTrackBy", ctx.nodeListTrackByFn);
    } }, directives: [i3.NgForOf, i4.BoxItemComponent, i5.DraggableDirective], pipes: [i3.AsyncPipe], styles: ["ce-canvas{bottom:0;left:0;position:absolute;right:0;top:0}"], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(CanvasComponent, [{
        type: Component,
        args: [{
                selector: 'ce-canvas',
                templateUrl: 'canvas.component.html',
                styleUrls: ['canvas.component.less'],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: i1.EditorStore }, { type: i2.CeUtilsService }]; }, null); })();
function getRefLineStateByDirection(direction, baseRect, referRect, gap) {
    return REF_LINE_DIRECTION_COMPARE_MAP[direction]
        .map(({ baseKey, referKey, baseValue }) => ({
        state: Math.abs(baseRect[baseKey] - referRect[referKey]) < gap,
        position: referRect[referKey],
        base: baseValue(baseRect, referRect),
    }))
        .find((item) => item.state);
}
//# sourceMappingURL=data:application/json;base64,
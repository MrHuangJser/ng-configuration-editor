import { __decorate } from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { InputBoolean } from 'ng-zorro-antd/core/util';
import { fromEvent, Subscription } from 'rxjs';
import { filter, finalize, map, switchMap, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class DraggableDirective {
    constructor(eleRef, cdr) {
        this.eleRef = eleRef;
        this.cdr = cdr;
        this.ceDragDisabled = false;
        this.ceUseSpace = false;
        this.ceOnStart = new EventEmitter();
        this.ceOnMove = new EventEmitter();
        this.ceOnStop = new EventEmitter();
        this.ceOnSpaceKeyDown = new EventEmitter();
        this.spaceKeyDown = false;
        this.subscription = new Subscription();
        this.mouseMove$ = fromEvent(window, 'pointermove');
        this.mouseUp$ = fromEvent(window, 'pointerup');
        this.keyDown$ = fromEvent(document, 'keydown');
        this.keyUp$ = fromEvent(document, 'keyup');
        this.mouseDown$ = fromEvent(this.eleRef.nativeElement, 'pointerdown').pipe(filter((e) => e.button === 0));
        this.mouseEnter$ = fromEvent(this.eleRef.nativeElement, 'pointerenter');
        this.mouseLeave$ = fromEvent(this.eleRef.nativeElement, 'pointerleave');
    }
    ngOnInit() {
        this.listenSpaceKeyEvent();
        this.mouseDown$
            .pipe(filter(() => !this.ceDragDisabled), filter(() => (this.ceUseSpace ? this.spaceKeyDown : true)), switchMap((startEv) => {
            this.ceOnStart.emit(startEv);
            return this.mouseMove$.pipe(takeUntil(this.mouseUp$.pipe(map((stopEv) => this.ceOnStop.emit(stopEv)))));
        }))
            .subscribe((moveEv) => this.ceOnMove.emit(moveEv));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    listenSpaceKeyEvent() {
        this.subscription.add(this.mouseEnter$
            .pipe(filter(() => !this.ceDragDisabled), filter(() => this.ceUseSpace), switchMap(() => this.keyDown$.pipe(switchMap((e) => {
            this.spaceKeyDown = e.key === ' ';
            this.cdr.detectChanges();
            if (this.spaceKeyDown) {
                e.preventDefault();
                e.stopPropagation();
            }
            return this.keyUp$;
        }), map(() => {
            this.spaceKeyDown = false;
            this.ceOnStop.emit();
        }), takeUntil(this.mouseLeave$), finalize(() => {
            this.spaceKeyDown = false;
            this.ceOnStop.emit();
        }))))
            .subscribe());
    }
}
DraggableDirective.ɵfac = function DraggableDirective_Factory(t) { return new (t || DraggableDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
DraggableDirective.ɵdir = i0.ɵɵdefineDirective({ type: DraggableDirective, selectors: [["", "ceDraggable", ""]], inputs: { ceDragDisabled: "ceDragDisabled", ceUseSpace: "ceUseSpace" }, outputs: { ceOnStart: "ceOnStart", ceOnMove: "ceOnMove", ceOnStop: "ceOnStop", ceOnSpaceKeyDown: "ceOnSpaceKeyDown" }, exportAs: ["ceDraggable"] });
__decorate([
    InputBoolean()
], DraggableDirective.prototype, "ceDragDisabled", void 0);
__decorate([
    InputBoolean()
], DraggableDirective.prototype, "ceUseSpace", void 0);
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DraggableDirective, [{
        type: Directive,
        args: [{
                selector: '[ceDraggable]',
                exportAs: 'ceDraggable',
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, { ceDragDisabled: [{
            type: Input
        }], ceUseSpace: [{
            type: Input
        }], ceOnStart: [{
            type: Output
        }], ceOnMove: [{
            type: Output
        }], ceOnStop: [{
            type: Output
        }], ceOnSpaceKeyDown: [{
            type: Output
        }] }); })();
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { ComponentStore } from '@ngrx/component-store';
import { BehaviorSubject } from 'rxjs';
import { filter, map, pairwise, startWith } from 'rxjs/operators';
import { LayerTreeComponent, PropertyFormComponent, WidgetListComponent } from '../components';
import { DEFAULT_STORE } from '../store';
import * as i0 from "@angular/core";
import * as i1 from "./utils.service";
export class EditorStore extends ComponentStore {
    constructor(utils) {
        super(DEFAULT_STORE);
        this.utils = utils;
        this._defaultPanels = [
            { key: 'LAYERS', title: '图层', content: LayerTreeComponent, show: true, x: 10, y: 60 },
            { key: 'WIDGET_LIST', title: '组件', content: WidgetListComponent, show: false, x: 50, y: 60 },
            { key: 'PROPERTIES', title: '属性', content: PropertyFormComponent, show: true, x: window.innerWidth - 350, y: 60 },
        ];
        this.panels = [];
        this.panels$ = new BehaviorSubject([...this._defaultPanels, ...this.panels]);
    }
    initialize(state) {
        this.setState(state);
    }
    _get() {
        return this.get();
    }
    dispatch(action) {
        this.setState(action);
    }
    selectDifferent(cb) {
        return this.select(cb).pipe(startWith(null, cb(this.get())), pairwise(), filter(([prev, present]) => !this.utils.isDeepEqual(prev, present)), map(([, present]) => present));
    }
    toJSON() {
        const state = this.get();
        return JSON.stringify({
            canvasPosition: state.canvasPosition,
            canvasSize: state.canvasSize,
            canvasBackground: state.canvasBackground,
            nodes: state.nodes,
            selected: state.selected,
            bordered: state.bordered,
        });
    }
    addPanels(panels) {
        this.panels = [...this.panels, ...panels];
        this.panels$.next([...this._defaultPanels, ...this.panels]);
    }
    getPanel(key) {
        return [...this._defaultPanels, ...this.panels].find((panel) => panel.key === key);
    }
    updatePanelPosition(key, [x, y]) {
        [...this._defaultPanels, ...this.panels].forEach((panel) => {
            if (panel.key === key) {
                panel.x = x;
                panel.y = y;
            }
        });
        this.panels$.next([...this._defaultPanels, ...this.panels]);
    }
    togglePanelVisible(key) {
        [...this._defaultPanels, ...this.panels].forEach((panel) => {
            if (panel.key === key) {
                panel.show = !panel.show;
            }
        });
        this.panels$.next([...this._defaultPanels, ...this.panels]);
    }
    togglePanelCollapsed(key) {
        [...this._defaultPanels, ...this.panels].forEach((panel) => {
            if (panel.key === key) {
                panel.collapsed = !panel.collapsed;
            }
        });
        this.panels$.next([...this._defaultPanels, ...this.panels]);
    }
}
EditorStore.ɵfac = function EditorStore_Factory(t) { return new (t || EditorStore)(i0.ɵɵinject(i1.CeUtilsService)); };
EditorStore.ɵprov = i0.ɵɵdefineInjectable({ token: EditorStore, factory: EditorStore.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(EditorStore, [{
        type: Injectable
    }], function () { return [{ type: i1.CeUtilsService }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,
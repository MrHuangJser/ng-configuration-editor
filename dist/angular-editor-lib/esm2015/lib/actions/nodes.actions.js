import * as _ from 'lodash';
import { CeUtilsService, genNodeId } from '../services';
export function lockNodes(ids) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: state.nodes.map((node) => (ids.includes(node.id) ? Object.assign(Object.assign({}, node), { locked: true }) : node)) }));
}
export function unlockNodes(ids) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: state.nodes.map((node) => (ids.includes(node.id) ? Object.assign(Object.assign({}, node), { locked: false }) : node)) }));
}
export function addNodes(nodes) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: [...state.nodes, ...nodes] }));
}
export function removeNodes(ids) {
    return (state) => {
        let parent = CeUtilsService.shared.getSameLayerParentByChildren(ids, state.nodes);
        if (parent === false) {
            return Object.assign({}, state);
        }
        else if (parent === undefined) {
            return Object.assign(Object.assign({}, state), { nodes: state.nodes.filter((node) => !ids.includes(node.id)) });
        }
        else {
            let originalParentId = parent.id;
            let newNodes = state.nodes.filter((node) => !ids.includes(node.id));
            let prevParent;
            let prevParentId;
            const parents = CeUtilsService.shared.getNodeAndParentListById(parent.id, _.cloneDeep(state.nodes));
            while (parents.length) {
                let parent = parents.shift();
                let children;
                const parentChildren = CeUtilsService.shared.getNodeChildren(parent.id, state.nodes);
                if (parent.id === originalParentId) {
                    children = parentChildren.filter((child) => !ids.includes(child.id));
                }
                else {
                    children = parentChildren
                        .filter((child) => (child.id === prevParentId ? prevParent : child))
                        .filter((child) => !!child);
                }
                prevParentId = parent.id;
                if (children.length > 1) {
                    const rect = CeUtilsService.shared.getOuterBoundingBox(children
                        .map((child) => (Object.assign({ rotate: child.rotate }, CeUtilsService.shared.getChildPositionBaseOnParentCoordinateSystem(parent, parent.rotate, child))))
                        .map((item) => CeUtilsService.shared.getAbsolutePosition(item.cx, item.cy, item.width, item.height, item.rotate)));
                    parent.width = rect.width;
                    parent.height = rect.height;
                    parent.left = rect.left;
                    parent.top = rect.top;
                }
                else if (children.length === 1) {
                    const rect = CeUtilsService.shared.getChildPositionBaseOnParentCoordinateSystem(parent, parent.rotate, children[0]);
                    parent = Object.assign(Object.assign(Object.assign({}, children[0]), rect), { parentId: parent.parentId });
                    newNodes = newNodes.map((node) => (node.id === parent.id ? Object.assign({}, parent) : node));
                }
                else if (children.length === 0) {
                    newNodes = newNodes.filter((node) => node.id !== parent.id);
                    parent = null;
                }
                prevParent = parent;
            }
            return Object.assign(Object.assign({}, state), { nodes: newNodes });
        }
    };
}
export function updateNodes(nodes) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: state.nodes.map((item) => (Object.assign(Object.assign({}, item), nodes.find((i) => i.id === item.id)))) }));
}
export function updateNodesSize(nodesSizeMap) {
    return (state) => state;
}
export function groupNodes(ids) {
    return (state) => {
        const parent = CeUtilsService.shared.getSameLayerParentByChildren(ids, state.nodes);
        if (parent === false) {
            return state;
        }
        const nodeMap = new Map();
        ids.forEach((id) => {
            const node = state.nodes.find((i) => i.id === id);
            if (node) {
                nodeMap.set(id, node);
            }
        });
        const groupRect = CeUtilsService.shared.getOuterBoundingBox(ids
            .filter((id) => nodeMap.has(id))
            .map((id) => {
            const node = nodeMap.get(id);
            return CeUtilsService.shared.getAbsolutePosition(node.left + node.width / 2, node.top + node.height / 2, node.width, node.height, node.rotate);
        }));
        const groupNode = Object.assign(Object.assign({ id: genNodeId(), name: 'Group' }, groupRect), { rotate: 0, zIndex: Math.max(...state.nodes.filter((node) => !nodeMap.has(node.id)).map((node) => node.zIndex)) + 1, children: ids
                .filter((id) => nodeMap.has(id))
                .map((id) => {
                const node = nodeMap.get(id);
                const { bl, br, tl, tr } = CeUtilsService.shared.getAbsolutePosition(node.left + node.width / 2, node.top + node.height / 2, node.width, node.height, node.rotate);
                return Object.assign(Object.assign({}, node), CeUtilsService.shared.getRelativePosition({
                    bl: [bl[0] - groupRect.left, bl[1] - groupRect.top],
                    br: [br[0] - groupRect.left, br[1] - groupRect.top],
                    tl: [tl[0] - groupRect.left, tl[1] - groupRect.top],
                    tr: [tr[0] - groupRect.left, tr[1] - groupRect.top],
                }));
            }) });
        return Object.assign(Object.assign({}, state), { nodes: [...state.nodes.filter((node) => !nodeMap.has(node.id)), groupNode] });
    };
}
export function breakNode(id) {
    return (state) => {
        const [node, ...parents] = CeUtilsService.shared.getNodeAndParentListById(id, _.cloneDeep(state.nodes));
        const newNodes = node.children.map((child) => {
            var _a, _b;
            return Object.assign(Object.assign(Object.assign({}, child), CeUtilsService.shared.getChildPositionBaseOnParentCoordinateSystem(node, node.rotate, child)), { rotate: ((_a = child.rotate) !== null && _a !== void 0 ? _a : 0) + ((_b = node.rotate) !== null && _b !== void 0 ? _b : 0) });
        });
        if (!parents.length) {
            return Object.assign(Object.assign({}, state), { nodes: [...state.nodes.filter((i) => i.id !== node.id), ...newNodes] });
        }
        else {
            let parent = parents.shift();
            parent.children = [...parent.children.filter((child) => child.id !== node.id), ...newNodes];
            while (parents.length) {
                const nextParent = parents.shift();
                nextParent.children = nextParent.children.map((child) => (child.id === parent.id ? parent : child));
                parent = nextParent;
            }
            return Object.assign(Object.assign({}, state), { nodes: [...state.nodes.filter((i) => i.id !== parent.id), parent] });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,
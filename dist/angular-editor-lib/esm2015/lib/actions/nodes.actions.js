import * as _ from 'lodash';
import { CeUtilsService, genNodeId } from '../services';
export function lockNodes(ids) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: state.nodes.map((node) => (ids.includes(node.id) ? Object.assign(Object.assign({}, node), { locked: true }) : node)) }));
}
export function unlockNodes(ids) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: state.nodes.map((node) => (ids.includes(node.id) ? Object.assign(Object.assign({}, node), { locked: false }) : node)) }));
}
export function addNodes(nodes) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: [...state.nodes, ...nodes] }));
}
export function removeNodes(ids) {
    return (state) => {
        let parent = CeUtilsService.shared.getSameLayerParentByChildren(ids, state.nodes);
        if (parent === false) {
            return Object.assign({}, state);
        }
        else if (parent === undefined) {
            return Object.assign(Object.assign({}, state), { nodes: state.nodes.filter((node) => !ids.includes(node.id)) });
        }
        else {
            const originalParentId = parent.id;
            let prevParent;
            let prevParentId;
            const parents = CeUtilsService.shared.getNodeAndParentListById(parent.id, _.cloneDeep(state.nodes));
            while (parents.length) {
                parent = parents.shift();
                let children;
                if (parent.id === originalParentId) {
                    children = parent.children.filter((child) => !ids.includes(child.id));
                }
                else {
                    children = parent.children
                        .filter((child) => (child.id === prevParentId ? prevParent : child))
                        .filter((child) => !!child);
                }
                prevParentId = parent.id;
                if (children.length > 1) {
                    const rect = CeUtilsService.shared.getOuterBoundingBox(children
                        .map((child) => (Object.assign({ rotate: child.rotate }, CeUtilsService.shared.getChildPositionBaseOnParentCoordinateSystem(parent, parent.rotate, child))))
                        .map((item) => CeUtilsService.shared.getAbsolutePosition(item.cx, item.cy, item.width, item.height, item.rotate)));
                    parent.width = rect.width;
                    parent.height = rect.height;
                    parent.left = rect.left;
                    parent.top = rect.top;
                    parent.children = children;
                }
                else if (children.length === 1) {
                    const rect = CeUtilsService.shared.getChildPositionBaseOnParentCoordinateSystem(parent, parent.rotate, children[0]);
                    parent = Object.assign(Object.assign({}, children[0]), rect);
                }
                else if (children.length === 0) {
                    parent = null;
                }
                prevParent = parent;
            }
            return Object.assign(Object.assign({}, state), { nodes: state.nodes.map((node) => (node.id === prevParentId ? parent : node)).filter((node) => !!node) });
        }
    };
}
export function updateNodes(nodes) {
    return (state) => (Object.assign(Object.assign({}, state), { nodes: state.nodes.map((item) => (Object.assign(Object.assign({}, item), nodes.find((i) => i.id === item.id)))) }));
}
export function updateNodesSize(nodesSizeMap) {
    return (state) => {
        var _a;
        let inSameLayer = true;
        const ids = [...nodesSizeMap.keys()];
        let parent;
        while (inSameLayer && ids.length) {
            const id = ids.pop();
            const node = CeUtilsService.shared.getNodeById(id, state.nodes);
            inSameLayer = (parent === null || parent === void 0 ? void 0 : parent.id) === ((_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.id);
            parent = node.parentNode;
        }
        if (!inSameLayer) {
            return state;
        }
        else {
            if (!parent) {
                return Object.assign(Object.assign({}, state), { nodes: state.nodes.map((node) => {
                        const newNode = Object.assign(Object.assign({}, node), nodesSizeMap.get(node.id));
                        if (node.children && node.children.length) {
                            return Object.assign(Object.assign({}, newNode), { children: recursiveUpdateNodeChildrenSize(newNode.children, Object.assign({}, node), Object.assign({}, newNode)) });
                        }
                        else {
                            return newNode;
                        }
                    }) });
            }
            else {
                return state;
            }
        }
    };
}
export function groupNodes(ids) {
    return (state) => {
        const parent = CeUtilsService.shared.getSameLayerParentByChildren(ids, state.nodes);
        if (parent === false) {
            return state;
        }
        const nodeMap = new Map();
        ids.forEach((id) => {
            const node = state.nodes.find((i) => i.id === id);
            if (node) {
                nodeMap.set(id, node);
            }
        });
        const groupRect = CeUtilsService.shared.getOuterBoundingBox(ids
            .filter((id) => nodeMap.has(id))
            .map((id) => {
            const node = nodeMap.get(id);
            return CeUtilsService.shared.getAbsolutePosition(node.left + node.width / 2, node.top + node.height / 2, node.width, node.height, node.rotate);
        }));
        const groupNode = Object.assign(Object.assign({ id: genNodeId(), name: 'Group' }, groupRect), { rotate: 0, zIndex: Math.max(...state.nodes.filter((node) => !nodeMap.has(node.id)).map((node) => node.zIndex)) + 1, children: ids
                .filter((id) => nodeMap.has(id))
                .map((id) => {
                const node = nodeMap.get(id);
                const { bl, br, tl, tr } = CeUtilsService.shared.getAbsolutePosition(node.left + node.width / 2, node.top + node.height / 2, node.width, node.height, node.rotate);
                return Object.assign(Object.assign({}, node), CeUtilsService.shared.getRelativePosition({
                    bl: [bl[0] - groupRect.left, bl[1] - groupRect.top],
                    br: [br[0] - groupRect.left, br[1] - groupRect.top],
                    tl: [tl[0] - groupRect.left, tl[1] - groupRect.top],
                    tr: [tr[0] - groupRect.left, tr[1] - groupRect.top],
                }));
            }) });
        return Object.assign(Object.assign({}, state), { nodes: [...state.nodes.filter((node) => !nodeMap.has(node.id)), groupNode] });
    };
}
export function breakNode(id) {
    return (state) => {
        const [node, ...parents] = CeUtilsService.shared.getNodeAndParentListById(id, _.cloneDeep(state.nodes));
        const newNodes = node.children.map((child) => {
            var _a, _b;
            return Object.assign(Object.assign(Object.assign({}, child), CeUtilsService.shared.getChildPositionBaseOnParentCoordinateSystem(node, node.rotate, child)), { rotate: ((_a = child.rotate) !== null && _a !== void 0 ? _a : 0) + ((_b = node.rotate) !== null && _b !== void 0 ? _b : 0) });
        });
        if (!parents.length) {
            return Object.assign(Object.assign({}, state), { nodes: [...state.nodes.filter((i) => i.id !== node.id), ...newNodes] });
        }
        else {
            let parent = parents.shift();
            parent.children = [...parent.children.filter((child) => child.id !== node.id), ...newNodes];
            while (parents.length) {
                const nextParent = parents.shift();
                nextParent.children = nextParent.children.map((child) => (child.id === parent.id ? parent : child));
                parent = nextParent;
            }
            return Object.assign(Object.assign({}, state), { nodes: [...state.nodes.filter((i) => i.id !== parent.id), parent] });
        }
    };
}
// /**
//  * 递归更新节点的位置和大小
//  * @param nodes 节点列表
//  * @param oldParentRect 父节点的旧尺寸和位置
//  * @param newParentRect 父节点的新尺寸和位置
//  */
// function recursiveUpdateNodeChildrenSize(nodes: INode[], oldParentRect: IDOMRect, newParentRect: IDOMRect): INode[] {
//   const { width, height } = newParentRect;
//   return nodes.map((node) => {
//     const cxPercent = (node.left + node.width / 2) / oldParentRect.width;
//     const cyPercent = (node.top + node.height / 2) / oldParentRect.height;
//     const widthPercent = node.width / oldParentRect.width;
//     const heightPercent = node.height / oldParentRect.height;
//     const newNodeRect: IDOMRect = {
//       width: widthPercent * width,
//       height: heightPercent * height,
//       left: cxPercent * width - (widthPercent * width) / 2,
//       top: cyPercent * height - (heightPercent * height) / 2,
//     };
//     if (node.children && node.children.length) {
//       return { ...node, ...newNodeRect, children: recursiveUpdateNodeChildrenSize(node.children, { ...node }, { ...newNodeRect }) };
//     } else {
//       return { ...node, ...newNodeRect };
//     }
//   });
// }
/**
 * 递归更新节点的位置和大小
 * @param nodes 节点列表
 * @param oldParentRect 父节点的旧尺寸和位置
 * @param newParentRect 父节点的新尺寸和位置
 */
function recursiveUpdateNodeChildrenSize(nodes, oldParentRect, newParentRect) {
    const { width, height } = newParentRect;
    return nodes.map((node) => {
        const nodeAbsolutePosition = CeUtilsService.shared.getAbsolutePosition(node.left + node.width / 2, node.top + node.height / 2, node.width, node.height, node.rotate);
        const { tl, tr, bl, br } = CeUtilsService.shared.getItemPercentPositionInGroup(Object.assign(Object.assign({}, oldParentRect), { left: 0, top: 0 }), nodeAbsolutePosition);
        const newNodeRect = CeUtilsService.shared.getRelativePosition({
            tl: [tl[0] * width, tl[1] * height],
            tr: [tr[0] * width, tr[1] * height],
            bl: [bl[0] * width, bl[1] * height],
            br: [br[0] * width, br[1] * height],
        });
        if (node.children && node.children.length) {
            return Object.assign(Object.assign(Object.assign({}, node), newNodeRect), { children: recursiveUpdateNodeChildrenSize(node.children, Object.assign({}, node), Object.assign({}, newNodeRect)) });
        }
        else {
            return Object.assign(Object.assign({}, node), newNodeRect);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,